{"pageProps":{"docs":[{"frontMatter":{"title":"Airdrop","date":"July 9, 2022","description":"Airdrop","thumbnailUrl":"/thumbnail.jpeg","tags":["airdrop"],"hideFromMenu":true},"slug":"airdrop"},{"frontMatter":{"title":"Demo","order":4},"slug":"api-demo"},{"frontMatter":{"title":"Babylon PTE","hideFromMenu":true,"order":5},"slug":"api-pte"},{"frontMatter":{"title":"API Reference","order":2},"slug":"api-reference"},{"frontMatter":{"title":"API V1","order":3},"slug":"api-v1"},{"frontMatter":{"title":"Introduction","order":1},"slug":"introduction"},{"frontMatter":{"title":"Privacy","date":"August 4, 2022","description":"Privacy policy","thumbnailUrl":"/thumbnail.jpeg","tags":["privacy"],"hideFromMenu":true},"slug":"privacy"},{"frontMatter":{"title":"Terms","date":"August 4, 2022","description":"Terms","thumbnailUrl":"/thumbnail.jpeg","tags":["terms"],"hideFromMenu":true},"slug":"terms"}],"frontMatter":{"title":"API V1","order":3},"slug":"api-v1","mdxSource":{"compiledSource":"var h=Object.defineProperty,p=Object.defineProperties;var g=Object.getOwnPropertyDescriptors;var o=Object.getOwnPropertySymbols;var r=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;var l=(e,n,t)=>n in e?h(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,s=(e,n)=>{for(var t in n||(n={}))r.call(n,t)&&l(e,t,n[t]);if(o)for(var t of o(n))a.call(n,t)&&l(e,t,n[t]);return e},c=(e,n)=>p(e,g(n));var d=(e,n)=>{var t={};for(var i in e)r.call(e,i)&&n.indexOf(i)<0&&(t[i]=e[i]);if(e!=null&&o)for(var i of o(e))n.indexOf(i)<0&&a.call(e,i)&&(t[i]=e[i]);return t};const makeShortcode=e=>function(t){return console.warn(\"Component \"+e+\" was not imported, exported, or provided by MDXProvider as global scope\"),mdx(\"div\",s({},t))},SyntaxHighlighter=makeShortcode(\"SyntaxHighlighter\"),layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var i=t,{components:e}=i,n=d(i,[\"components\"]);return mdx(MDXLayout,c(s(s({},layoutProps),n),{components:e,mdxType:\"MDXLayout\"}),mdx(\"h1\",null,\"V1\"),mdx(\"p\",null,\"Provider API is promise based, and user is expected to catch and handle errors, promises will resolve whenever possible or timeout after 3 minutes. Including confirmation window.\"),mdx(SyntaxHighlighter,{language:\"typescript\",mdxType:\"SyntaxHighlighter\"},`\ndeclare global {\n\tinterface Window {\n\t\tz3us: {\n\t\t\tv1: {\n\t\t\t\thasWallet: () => Promise<boolean>\n\t\t\t\tisConnected: () => Promise<boolean>\n\t\t\t\tconnect: () => Promise<string>\n\t\t\t\tdisconnect: () => Promise<void>\n\t\t\t\tsign: (challenge: string) => Promise<string>\n\t\t\t\tsubmitTransaction: (payload: { transaction: any }) => Promise<any>\n\t\t\t\tencrypt: (message: string, fromAddress: string, toAddress: string) => Promise<string>\n\t\t\t\tdecrypt: (message: string, fromAddress: string) => Promise<string>\n\t\t\t\taddresses: () => Promise<string[]>\n\t\t\t\tbalances: () => Promise<unknown>\n\t\t\t\tstakes: () => Promise<unknown>\n\t\t\t\tunstakes: () => Promise<unknown>\n\t\t\t\t/**\n\t\t\t\t* @deprecated Use submitTransaction() instead\n\t\t\t\t*/\n\t\t\t\tsendTransaction: (payload: { symbol: string; fromAddress: string; transaction: any }) => Promise<any>\n\t\t\t}\n\t\t}\n\t}\n}\n  `),mdx(\"h2\",null,\"Error handling\"),mdx(\"p\",null,\"To handle errors in a simple manner, use \",mdx(\"inlineCode\",{parentName:\"p\"},\"try/catch\"),\" block, function will throw in case of action declined or unexpected error. There is a 3 minute timeout on the promise.\"),mdx(SyntaxHighlighter,{language:\"typescript\",mdxType:\"SyntaxHighlighter\"},`\ntry {\n\tconst response = await window.z3us.v1.balances()\n} catch (error) {\n\tconsole.error(error)\n}\n  `),mdx(\"h2\",null,\"Connecting\"),mdx(\"p\",null,\"Prior to connecting, please verify that \",mdx(\"inlineCode\",{parentName:\"p\"},\"window.z3us\"),\" is available and that user has initialised their wallet. To connect use window.z3us.v1.connect() which will return the currently selected address.\"),mdx(SyntaxHighlighter,{language:\"typescript\",mdxType:\"SyntaxHighlighter\"},`\nconst hasWallet = await window.z3us?.v1.hasWallet()\nif (!hasWallet) {\n\treturn\n}\nconst selectedAddress = await window.z3us.v1.connect()\n  `),mdx(\"p\",null,\"Once the user authorises your website, the extension popup will not show again (unless they remove the permissions) and the \",mdx(\"inlineCode\",{parentName:\"p\"},\"connect\"),\" method will return the selected address.\"),mdx(\"h2\",null,\"Disconnecting\"),mdx(\"p\",null,\"Your website might be disconnected by the user, or you can call \",mdx(\"em\",{parentName:\"p\"},\"disconnect\"),\" method, which will trigger extension popup again next time you call connect.\"),mdx(SyntaxHighlighter,{language:\"typescript\",mdxType:\"SyntaxHighlighter\"},`\nawait window.z3us.v1.disconnect()\n  `),mdx(\"p\",null,mdx(\"a\",s({parentName:\"p\"},{href:\"https://z3us.com\"}),\"Z3US\"),\" injects a global API into websites visited by its users at \",mdx(\"inlineCode\",{parentName:\"p\"},\"window.z3us\"),\". This API allows users to interact with wallet and \",mdx(\"a\",s({parentName:\"p\"},{href:\"https://www.radixdlt.com/\"}),\"Radix DLT\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}}},"__N_SSG":true}